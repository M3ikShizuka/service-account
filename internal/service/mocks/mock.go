// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	domain "service-account/internal/domain"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockOAuth2 is a mock of OAuth2 interface.
type MockOAuth2 struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2MockRecorder
}

// MockOAuth2MockRecorder is the mock recorder for MockOAuth2.
type MockOAuth2MockRecorder struct {
	mock *MockOAuth2
}

// NewMockOAuth2 creates a new mock instance.
func NewMockOAuth2(ctrl *gomock.Controller) *MockOAuth2 {
	mock := &MockOAuth2{ctrl: ctrl}
	mock.recorder = &MockOAuth2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2) EXPECT() *MockOAuth2MockRecorder {
	return m.recorder
}

// AcceptConsentRequest mocks base method.
func (m *MockOAuth2) AcceptConsentRequest(context context.Context, challenge string, grantScope, grantAccessTokenAudience []string, remember bool, rememberFor int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsentRequest", context, challenge, grantScope, grantAccessTokenAudience, remember, rememberFor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptConsentRequest indicates an expected call of AcceptConsentRequest.
func (mr *MockOAuth2MockRecorder) AcceptConsentRequest(context, challenge, grantScope, grantAccessTokenAudience, remember, rememberFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsentRequest", reflect.TypeOf((*MockOAuth2)(nil).AcceptConsentRequest), context, challenge, grantScope, grantAccessTokenAudience, remember, rememberFor)
}

// AcceptLoginRequest mocks base method.
func (m *MockOAuth2) AcceptLoginRequest(context context.Context, challenge, subject string, remember bool, rememberFor int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLoginRequest", context, challenge, subject, remember, rememberFor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptLoginRequest indicates an expected call of AcceptLoginRequest.
func (mr *MockOAuth2MockRecorder) AcceptLoginRequest(context, challenge, subject, remember, rememberFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLoginRequest", reflect.TypeOf((*MockOAuth2)(nil).AcceptLoginRequest), context, challenge, subject, remember, rememberFor)
}

// AcceptLogoutRequest mocks base method.
func (m *MockOAuth2) AcceptLogoutRequest(context context.Context, challenge string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLogoutRequest", context, challenge)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptLogoutRequest indicates an expected call of AcceptLogoutRequest.
func (mr *MockOAuth2MockRecorder) AcceptLogoutRequest(context, challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLogoutRequest", reflect.TypeOf((*MockOAuth2)(nil).AcceptLogoutRequest), context, challenge)
}

// GenerateLogoutURL mocks base method.
func (m *MockOAuth2) GenerateLogoutURL(idTokenHint, state, postLogoutRedirectUri string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLogoutURL", idTokenHint, state, postLogoutRedirectUri)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateLogoutURL indicates an expected call of GenerateLogoutURL.
func (mr *MockOAuth2MockRecorder) GenerateLogoutURL(idTokenHint, state, postLogoutRedirectUri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLogoutURL", reflect.TypeOf((*MockOAuth2)(nil).GenerateLogoutURL), idTokenHint, state, postLogoutRedirectUri)
}

// GetAuthCodeUrl mocks base method.
func (m *MockOAuth2) GetAuthCodeUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthCodeUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthCodeUrl indicates an expected call of GetAuthCodeUrl.
func (mr *MockOAuth2MockRecorder) GetAuthCodeUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCodeUrl", reflect.TypeOf((*MockOAuth2)(nil).GetAuthCodeUrl))
}

// GetConsentRequest mocks base method.
func (m *MockOAuth2) GetConsentRequest(context context.Context, challenge string) (*domain.OA2ConsentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsentRequest", context, challenge)
	ret0, _ := ret[0].(*domain.OA2ConsentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsentRequest indicates an expected call of GetConsentRequest.
func (mr *MockOAuth2MockRecorder) GetConsentRequest(context, challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsentRequest", reflect.TypeOf((*MockOAuth2)(nil).GetConsentRequest), context, challenge)
}

// GetLoginRequest mocks base method.
func (m *MockOAuth2) GetLoginRequest(context context.Context, challenge string) (*domain.OA2LoginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginRequest", context, challenge)
	ret0, _ := ret[0].(*domain.OA2LoginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginRequest indicates an expected call of GetLoginRequest.
func (mr *MockOAuth2MockRecorder) GetLoginRequest(context, challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginRequest", reflect.TypeOf((*MockOAuth2)(nil).GetLoginRequest), context, challenge)
}

// IntrospectOAuth2Token mocks base method.
func (m *MockOAuth2) IntrospectOAuth2Token(context context.Context, accessToken string) (*domain.OA2TokenIntrospection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectOAuth2Token", context, accessToken)
	ret0, _ := ret[0].(*domain.OA2TokenIntrospection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectOAuth2Token indicates an expected call of IntrospectOAuth2Token.
func (mr *MockOAuth2MockRecorder) IntrospectOAuth2Token(context, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectOAuth2Token", reflect.TypeOf((*MockOAuth2)(nil).IntrospectOAuth2Token), context, accessToken)
}

// RejectConsentRequest mocks base method.
func (m *MockOAuth2) RejectConsentRequest(context context.Context, challenge, errStr, errDescStr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectConsentRequest", context, challenge, errStr, errDescStr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectConsentRequest indicates an expected call of RejectConsentRequest.
func (mr *MockOAuth2MockRecorder) RejectConsentRequest(context, challenge, errStr, errDescStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectConsentRequest", reflect.TypeOf((*MockOAuth2)(nil).RejectConsentRequest), context, challenge, errStr, errDescStr)
}

// RejectLoginRequest mocks base method.
func (m *MockOAuth2) RejectLoginRequest(context context.Context, challenge, errStr, errDescStr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectLoginRequest", context, challenge, errStr, errDescStr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectLoginRequest indicates an expected call of RejectLoginRequest.
func (mr *MockOAuth2MockRecorder) RejectLoginRequest(context, challenge, errStr, errDescStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectLoginRequest", reflect.TypeOf((*MockOAuth2)(nil).RejectLoginRequest), context, challenge, errStr, errDescStr)
}

// RejectLogoutRequest mocks base method.
func (m *MockOAuth2) RejectLogoutRequest(context context.Context, challenge string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectLogoutRequest", context, challenge)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectLogoutRequest indicates an expected call of RejectLogoutRequest.
func (mr *MockOAuth2MockRecorder) RejectLogoutRequest(context, challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectLogoutRequest", reflect.TypeOf((*MockOAuth2)(nil).RejectLogoutRequest), context, challenge)
}

// TokenExchange mocks base method.
func (m *MockOAuth2) TokenExchange(ctx context.Context, code string) (*domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenExchange", ctx, code)
	ret0, _ := ret[0].(*domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenExchange indicates an expected call of TokenExchange.
func (mr *MockOAuth2MockRecorder) TokenExchange(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenExchange", reflect.TypeOf((*MockOAuth2)(nil).TokenExchange), ctx, code)
}
